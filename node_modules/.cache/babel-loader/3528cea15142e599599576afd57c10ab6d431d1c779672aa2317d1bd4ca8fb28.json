{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport useApi from './useApi';\nimport { toast } from 'react-toastify';\nimport useAuth from './useAuth';\nconst usePatients = (searchQuery, searched) => {\n  _s();\n  const {\n    get,\n    loading,\n    error\n  } = useApi();\n  const [patients, setPatients] = useState([]);\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (searched && user && user.token) {\n          const fetchedPatients = await get(`http://localhost:8085/api/v1/patients/search?q=${searchQuery}`, user.token);\n          if (fetchedPatients) {\n            setPatients(fetchedPatients);\n          } else {\n            toast.error(\"Error fetching patients\");\n          }\n        }\n      } catch (error) {\n        toast.error('Error fetching patients');\n      }\n    };\n    fetchData();\n  }, [user, searched, searchQuery]);\n  return {\n    patients,\n    loading,\n    error\n  };\n};\n_s(usePatients, \"Loiv3wLyJTUqy+SqmJzyLNhgHKc=\", false, function () {\n  return [useApi, useAuth];\n});\nexport default usePatients;","map":{"version":3,"names":["useEffect","useState","useApi","toast","useAuth","usePatients","searchQuery","searched","_s","get","loading","error","patients","setPatients","user","fetchData","token","fetchedPatients"],"sources":["C:/Users/Yaman/GitHub/PatientJournalFrontend/src/hooks/usePatients.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport useApi from './useApi';\r\nimport { toast } from 'react-toastify';\r\nimport useAuth from './useAuth';\r\n\r\nconst usePatients = (searchQuery, searched) => {\r\n  const { get, loading, error } = useApi();\r\n  const [patients, setPatients] = useState([]);\r\n  \r\n  const { user } = useAuth();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        if (searched && user && user.token) {\r\n          const fetchedPatients = await get(`http://localhost:8085/api/v1/patients/search?q=${searchQuery}`, user.token);\r\n          if (fetchedPatients) {\r\n            setPatients(fetchedPatients);\r\n          } else {\r\n            toast.error(\"Error fetching patients\");\r\n          }\r\n        }\r\n      } catch (error) {\r\n        toast.error('Error fetching patients');\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [user, searched, searchQuery]);\r\n\r\n  return { patients, loading, error };\r\n};\r\n\r\nexport default usePatients;\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,OAAO,MAAM,WAAW;AAE/B,MAAMC,WAAW,GAAGA,CAACC,WAAW,EAAEC,QAAQ,KAAK;EAAAC,EAAA;EAC7C,MAAM;IAAEC,GAAG;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGT,MAAM,CAAC,CAAC;EACxC,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAM;IAAEa;EAAK,CAAC,GAAGV,OAAO,CAAC,CAAC;EAE1BJ,SAAS,CAAC,MAAM;IACd,MAAMe,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,IAAIR,QAAQ,IAAIO,IAAI,IAAIA,IAAI,CAACE,KAAK,EAAE;UAClC,MAAMC,eAAe,GAAG,MAAMR,GAAG,CAAE,kDAAiDH,WAAY,EAAC,EAAEQ,IAAI,CAACE,KAAK,CAAC;UAC9G,IAAIC,eAAe,EAAE;YACnBJ,WAAW,CAACI,eAAe,CAAC;UAC9B,CAAC,MAAM;YACLd,KAAK,CAACQ,KAAK,CAAC,yBAAyB,CAAC;UACxC;QACF;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdR,KAAK,CAACQ,KAAK,CAAC,yBAAyB,CAAC;MACxC;IACF,CAAC;IAEDI,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACD,IAAI,EAAEP,QAAQ,EAAED,WAAW,CAAC,CAAC;EAEjC,OAAO;IAAEM,QAAQ;IAAEF,OAAO;IAAEC;EAAM,CAAC;AACrC,CAAC;AAACH,EAAA,CA1BIH,WAAW;EAAA,QACiBH,MAAM,EAGrBE,OAAO;AAAA;AAwB1B,eAAeC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}