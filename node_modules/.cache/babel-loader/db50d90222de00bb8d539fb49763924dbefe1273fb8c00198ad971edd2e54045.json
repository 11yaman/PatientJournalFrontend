{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yaman\\\\GitHub\\\\PatientJournalFrontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport ToastContext from \"./ToastContext\";\nimport useApi from \"../hooks/useApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthContextProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    toast\n  } = useContext(ToastContext);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [user, setUser] = useState(null);\n  const {\n    get,\n    post,\n    loading,\n    error\n  } = useApi();\n  useEffect(() => {\n    checkUserLoggedIn();\n  }, []);\n  const getErrorMessage = status => {\n    switch (status) {\n      case 401:\n        return \"Incorrect user ID or password\";\n      case 403:\n        return \"Access Denied\";\n      case 404:\n        return \"Not found\";\n      case 406:\n        return \"Invalid input data\";\n      case 409:\n        return \"Already exists\";\n      default:\n        return \"An error occurred11\";\n    }\n  };\n  const checkUserLoggedIn = async () => {\n    try {\n      const storedUser = JSON.parse(localStorage.getItem(\"user\"));\n      if (storedUser && storedUser) {\n        const result = await get(\"http://localhost:8088/realms/fullstack/protocol/openid-connect/userinfo\", storedUser.token);\n        if (result) {\n          if (location.pathname === \"/login\" || location.pathname === \"/register\") {\n            setTimeout(() => {\n              navigate(\"/\", {\n                replace: true\n              });\n            }, 500);\n          } else {\n            navigate(location.pathname ? location.pathname : \"/\");\n          }\n          result.token = storedToken;\n          setUser(result);\n        } else {\n          navigate(\"/login\", {\n            replace: true\n          });\n        }\n      } else {\n        navigate(\"/login\", {\n          replace: true\n        });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const loginUser = async userData => {\n    try {\n      const requestBody = {\n        ...userData,\n        client_id: \"patient-system\",\n        client_secret: \"bojQbR6H7Ss6PrERwAqx8cQMrGZPQ00G\",\n        grant_type: \"password\"\n      };\n      const result = await post(\"http://localhost:8088/realms/fullstack/protocol/openid-connect/token\", requestBody);\n      if (result && result.access_token) {\n        var _location$state, _location$state$from;\n        localStorage.setItem(\"user\", result.access_token);\n        setUser({\n          token: result.access_token\n        });\n        toast.success(`Logged in ${result.firstName}`);\n        navigate(((_location$state = location.state) === null || _location$state === void 0 ? void 0 : (_location$state$from = _location$state.from) === null || _location$state$from === void 0 ? void 0 : _location$state$from.pathname) || \"/\", {\n          replace: true\n        });\n      } else {\n        const errorMessage = getErrorMessage(401);\n        toast.error(errorMessage);\n      }\n    } catch (err) {\n      toast.error(getErrorMessage(err.response.status));\n    }\n  };\n  const registerPatient = async userData => {\n    try {\n      const result = await post(\"http://localhost:8083/api/v1/patients/register\", userData);\n      if (result) {\n        localStorage.setItem(\"user\", JSON.stringify(result));\n        setUser(result);\n        toast.success(\"User registered successfully!\");\n        navigate(\"/\", {\n          replace: true\n        });\n      } else {\n        toast.error(\"An error occurred\");\n      }\n    } catch (err) {\n      const errorMessage = getErrorMessage(err.response.status);\n      toast.error(errorMessage);\n    }\n  };\n  const logout = async () => {\n    try {\n      const storedUser = JSON.parse(localStorage.getItem(\"user\"));\n      if (storedUser) {\n        await post(\"http://localhost:8088/realms/fullstack/protocol/openid-connect/logout\", null, storedUser.token);\n        localStorage.removeItem(\"user\");\n        setUser(null);\n        navigate(\"/login\");\n        toast.success(\"Logged out successfully\");\n      }\n    } catch (err) {\n      const errorMessage = getErrorMessage(err.response.status);\n      toast.error(errorMessage);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      loginUser,\n      registerPatient,\n      logout,\n      user,\n      setUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthContextProvider, \"J5uMbalD9t33W1TGWvzz30w5SeQ=\", false, function () {\n  return [useNavigate, useLocation, useApi];\n});\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","useLocation","useNavigate","ToastContext","useApi","jsxDEV","_jsxDEV","AuthContext","AuthContextProvider","children","_s","toast","navigate","location","user","setUser","get","post","loading","error","checkUserLoggedIn","getErrorMessage","status","storedUser","JSON","parse","localStorage","getItem","result","token","pathname","setTimeout","replace","storedToken","err","console","log","loginUser","userData","requestBody","client_id","client_secret","grant_type","access_token","_location$state","_location$state$from","setItem","success","firstName","state","from","errorMessage","response","registerPatient","stringify","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Yaman/GitHub/PatientJournalFrontend/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport ToastContext from \"./ToastContext\";\r\nimport useApi from \"../hooks/useApi\"; \r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthContextProvider = ({ children }) => {\r\n  const { toast } = useContext(ToastContext);\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const [user, setUser] = useState(null);\r\n  const { get, post, loading, error } = useApi();  \r\n\r\n  useEffect(() => {\r\n    checkUserLoggedIn();\r\n  }, []);\r\n\r\n  const getErrorMessage = (status) => {\r\n    switch (status) {\r\n      case 401:\r\n        return \"Incorrect user ID or password\";\r\n      case 403:\r\n        return \"Access Denied\";\r\n      case 404:\r\n        return \"Not found\";\r\n      case 406:\r\n        return \"Invalid input data\";\r\n      case 409:\r\n        return \"Already exists\";\r\n      default:\r\n        return \"An error occurred11\";\r\n    }\r\n  };\r\n\r\n  const checkUserLoggedIn = async () => {\r\n    try {\r\n      const storedUser = JSON.parse(localStorage.getItem(\"user\"));\r\n      if (storedUser && storedUser) {\r\n        const result = await get(\"http://localhost:8088/realms/fullstack/protocol/openid-connect/userinfo\", storedUser.token);\r\n\r\n        if (result) {\r\n          if (\r\n            location.pathname === \"/login\" ||\r\n            location.pathname === \"/register\"\r\n          ) {\r\n            setTimeout(() => {\r\n              navigate(\"/\", { replace: true });\r\n            }, 500);\r\n          } else {\r\n            navigate(location.pathname ? location.pathname : \"/\");\r\n          }\r\n          result.token = storedToken;\r\n          setUser(result);\r\n        } else {\r\n          navigate(\"/login\", { replace: true });\r\n        }\r\n      } else {\r\n        navigate(\"/login\", { replace: true });\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const loginUser = async (userData) => {\r\n    try {\r\n      const requestBody = {\r\n        ...userData,\r\n        client_id: \"patient-system\",\r\n        client_secret: \"bojQbR6H7Ss6PrERwAqx8cQMrGZPQ00G\",\r\n        grant_type: \"password\",\r\n      };\r\n  \r\n      const result = await post(\"http://localhost:8088/realms/fullstack/protocol/openid-connect/token\", requestBody);\r\n\r\n      if (result && result.access_token) {\r\n        localStorage.setItem(\"user\", result.access_token);\r\n\r\n        setUser({ token: result.access_token }); \r\n\r\n        toast.success(`Logged in ${result.firstName}`);\r\n\r\n        navigate(location.state?.from?.pathname || \"/\", { replace: true });\r\n      } else {\r\n        const errorMessage = getErrorMessage(401);\r\n        toast.error(errorMessage);\r\n      }\r\n    } catch (err) {\r\n      toast.error(getErrorMessage(err.response.status));\r\n    }\r\n  };\r\n\r\n  const registerPatient = async (userData) => {\r\n    try {\r\n      const result = await post(\"http://localhost:8083/api/v1/patients/register\", userData);\r\n\r\n      if (result) {\r\n        localStorage.setItem(\"user\", JSON.stringify(result));\r\n        setUser(result);\r\n        toast.success(\"User registered successfully!\");\r\n\r\n        navigate(\"/\", { replace: true });\r\n      } else {\r\n        toast.error(\"An error occurred\");\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = getErrorMessage(err.response.status);\r\n      toast.error(errorMessage);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      const storedUser = JSON.parse(localStorage.getItem(\"user\"));\r\n      if (storedUser) {\r\n        await post(\"http://localhost:8088/realms/fullstack/protocol/openid-connect/logout\", null, storedUser.token);\r\n        localStorage.removeItem(\"user\");\r\n        setUser(null);\r\n        navigate(\"/login\");\r\n        toast.success(\"Logged out successfully\");\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = getErrorMessage(err.response.status);\r\n      toast.error(errorMessage);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ loginUser, registerPatient, logout, user, setUser }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}