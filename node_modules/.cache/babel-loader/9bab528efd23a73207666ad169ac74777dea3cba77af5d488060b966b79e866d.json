{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yaman\\\\GitHub\\\\PatientJournalFrontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport ToastContext from \"./ToastContext\";\nimport useApi from \"../hooks/useApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthContextProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    toast\n  } = useContext(ToastContext);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [user, setUser] = useState(null);\n  const {\n    get,\n    post,\n    loading,\n    error\n  } = useApi();\n  useEffect(() => {\n    checkUserLoggedIn();\n  }, []);\n  const getErrorMessage = status => {\n    switch (status) {\n      case 401:\n        return \"Incorrect user ID or password\";\n      case 403:\n        return \"Access Denied\";\n      case 404:\n        return \"Not found\";\n      case 406:\n        return \"Invalid input data\";\n      case 409:\n        return \"Already exists\";\n      default:\n        return \"An error occurred\";\n    }\n  };\n  const checkUserLoggedIn = async () => {\n    try {\n      const storedUser = JSON.parse(localStorage.getItem(\"user\"));\n      if (storedUser && storedUser.token) {\n        const result = await get(\"http://localhost:8088/realms/fullstack/protocol/openid-connect/userinfo\", storedUser.token);\n        if (result) {\n          const filteredUser = {\n            role: getRoleFromRoles(result.realm_access.roles),\n            name: result.name,\n            username: result.preferred_username,\n            given_name: result.given_name,\n            family_name: result.family_name,\n            email: result.email,\n            token: storedUser.token\n          };\n          if (location.pathname === \"/login\" || location.pathname === \"/register\") {\n            setTimeout(() => {\n              navigate(\"/\", {\n                replace: true\n              });\n            }, 500);\n          } else {\n            navigate(location.pathname ? location.pathname : \"/\");\n          }\n          result.token = storedUser.token;\n          localStorage.setItem(\"user\", JSON.stringify(filteredUser));\n          setUser(filteredUser);\n        } else {\n          navigate(\"/login\", {\n            replace: true\n          });\n        }\n      } else {\n        navigate(\"/login\", {\n          replace: true\n        });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const loginUser = async ({\n    username,\n    password\n  }) => {\n    try {\n      const requestBody = {\n        client_id: \"patient-system\",\n        client_secret: \"bojQbR6H7Ss6PrERwAqx8cQMrGZPQ00G\",\n        grant_type: \"password\",\n        username,\n        password\n      };\n      const result = await post(\"http://localhost:8088/realms/fullstack/protocol/openid-connect/token\", requestBody, null, contentType = 'application/x-www-form-urlencoded');\n      if (result && result.access_token) {\n        var _location$state, _location$state$from;\n        localStorage.setItem(\"user\", JSON.stringify({\n          token: result.access_token\n        }));\n        setUser({\n          token: result.access_token\n        });\n        toast.success(`Logged in`);\n        navigate(((_location$state = location.state) === null || _location$state === void 0 ? void 0 : (_location$state$from = _location$state.from) === null || _location$state$from === void 0 ? void 0 : _location$state$from.pathname) || \"/\", {\n          replace: true\n        });\n      } else {\n        const errorMessage = getErrorMessage(401);\n        toast.error(errorMessage);\n      }\n    } catch (err) {\n      toast.error(getErrorMessage(err.response.status));\n    }\n    checkUserLoggedIn();\n  };\n  const registerPatient = async userData => {\n    try {\n      const result = await post(\"http://localhost:8083/api/v1/patients/register\", userData);\n      if (result) {\n        localStorage.setItem(\"user\", JSON.stringify(result));\n        setUser(result);\n        toast.success(\"User registered successfully!\");\n        navigate(\"/login\", {\n          replace: true\n        });\n      } else {\n        toast.error(\"An error occurred\");\n      }\n    } catch (err) {\n      const errorMessage = getErrorMessage(err.response.status);\n      toast.error(errorMessage);\n    }\n  };\n  const logout = async () => {\n    try {\n      const storedUser = JSON.parse(localStorage.getItem(\"user\"));\n      if (storedUser) {\n        await post(\"http://localhost:8088/realms/fullstack/protocol/openid-connect/logout\", null, storedUser.token);\n        localStorage.removeItem(\"user\");\n        setUser(null);\n        navigate(\"/login\");\n        toast.success(\"Logged out successfully\");\n      }\n    } catch (err) {\n      const errorMessage = getErrorMessage(err.response.status);\n      toast.error(errorMessage);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      loginUser,\n      registerPatient,\n      logout,\n      user,\n      setUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthContextProvider, \"J5uMbalD9t33W1TGWvzz30w5SeQ=\", false, function () {\n  return [useNavigate, useLocation, useApi];\n});\n_c = AuthContextProvider;\nconst getRoleFromRoles = roles => {\n  if (roles.includes(\"PATIENT\")) {\n    return \"PATIENT\";\n  } else if (roles.includes(\"EMPLOYEE\")) {\n    return \"EMPLOYEE\";\n  } else if (roles.includes(\"ADMIN\")) {\n    return \"ADMIN\";\n  } else {\n    return null;\n  }\n};\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","useLocation","useNavigate","ToastContext","useApi","jsxDEV","_jsxDEV","AuthContext","AuthContextProvider","children","_s","toast","navigate","location","user","setUser","get","post","loading","error","checkUserLoggedIn","getErrorMessage","status","storedUser","JSON","parse","localStorage","getItem","token","result","filteredUser","role","getRoleFromRoles","realm_access","roles","name","username","preferred_username","given_name","family_name","email","pathname","setTimeout","replace","setItem","stringify","err","console","log","loginUser","password","requestBody","client_id","client_secret","grant_type","contentType","access_token","_location$state","_location$state$from","success","state","from","errorMessage","response","registerPatient","userData","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","includes","$RefreshReg$"],"sources":["C:/Users/Yaman/GitHub/PatientJournalFrontend/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport ToastContext from \"./ToastContext\";\r\nimport useApi from \"../hooks/useApi\"; \r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthContextProvider = ({ children }) => {\r\n  const { toast } = useContext(ToastContext);\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const [user, setUser] = useState(null);\r\n  const { get, post, loading, error } = useApi();  \r\n\r\n  useEffect(() => {\r\n    checkUserLoggedIn();\r\n  }, []);\r\n\r\n  const getErrorMessage = (status) => {\r\n    switch (status) {\r\n      case 401:\r\n        return \"Incorrect user ID or password\";\r\n      case 403:\r\n        return \"Access Denied\";\r\n      case 404:\r\n        return \"Not found\";\r\n      case 406:\r\n        return \"Invalid input data\";\r\n      case 409:\r\n        return \"Already exists\";\r\n      default:\r\n        return \"An error occurred\";\r\n    }\r\n  };\r\n\r\n  const checkUserLoggedIn = async () => {\r\n    try {\r\n      const storedUser = JSON.parse(localStorage.getItem(\"user\"));\r\n      if (storedUser && storedUser.token) {\r\n        const result = await get(\"http://localhost:8088/realms/fullstack/protocol/openid-connect/userinfo\", storedUser.token);\r\n\r\n        if (result) {\r\n          const filteredUser = {\r\n            role: getRoleFromRoles(result.realm_access.roles),\r\n            name: result.name,\r\n            username: result.preferred_username,\r\n            given_name: result.given_name,\r\n            family_name: result.family_name,\r\n            email: result.email,\r\n            token:storedUser.token\r\n          };\r\n\r\n          if (\r\n            location.pathname === \"/login\" ||\r\n            location.pathname === \"/register\"\r\n          ) {\r\n            setTimeout(() => {\r\n              navigate(\"/\", { replace: true });\r\n            }, 500);\r\n          } else {\r\n            navigate(location.pathname ? location.pathname : \"/\");\r\n          }\r\n          result.token = storedUser.token;\r\n          localStorage.setItem(\"user\", JSON.stringify(filteredUser));\r\n          setUser(filteredUser);\r\n        } else {\r\n          navigate(\"/login\", { replace: true });\r\n        }\r\n      } else {\r\n        navigate(\"/login\", { replace: true });\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const loginUser = async ({ username, password }) => {\r\n    try {\r\n      const requestBody = {\r\n        client_id: \"patient-system\",\r\n        client_secret: \"bojQbR6H7Ss6PrERwAqx8cQMrGZPQ00G\",\r\n        grant_type: \"password\",\r\n        username,\r\n        password,\r\n      };\r\n  \r\n      const result = await post(\"http://localhost:8088/realms/fullstack/protocol/openid-connect/token\",\r\n        requestBody,\r\n        null,\r\n        contentType = 'application/x-www-form-urlencoded'\r\n      );\r\n\r\n      if (result && result.access_token) {\r\n        localStorage.setItem(\"user\", JSON.stringify({ token: result.access_token }));\r\n\r\n        setUser({ token: result.access_token }); \r\n\r\n        toast.success(`Logged in`);\r\n\r\n        navigate(location.state?.from?.pathname || \"/\", { replace: true });\r\n      } else {\r\n        const errorMessage = getErrorMessage(401);\r\n        toast.error(errorMessage);\r\n      }\r\n    } catch (err) {\r\n      toast.error(getErrorMessage(err.response.status));\r\n    }\r\n    checkUserLoggedIn();\r\n  };\r\n\r\n  const registerPatient = async (userData) => {\r\n    try {\r\n      const result = await post(\"http://localhost:8083/api/v1/patients/register\", userData);\r\n\r\n      if (result) {\r\n        localStorage.setItem(\"user\", JSON.stringify(result));\r\n        setUser(result);\r\n        toast.success(\"User registered successfully!\");\r\n\r\n        navigate(\"/login\", { replace: true });\r\n      } else {\r\n        toast.error(\"An error occurred\");\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = getErrorMessage(err.response.status);\r\n      toast.error(errorMessage);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      const storedUser = JSON.parse(localStorage.getItem(\"user\"));\r\n      if (storedUser) {\r\n        await post(\"http://localhost:8088/realms/fullstack/protocol/openid-connect/logout\", null, storedUser.token);\r\n        localStorage.removeItem(\"user\");\r\n        setUser(null);\r\n        navigate(\"/login\");\r\n        toast.success(\"Logged out successfully\");\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = getErrorMessage(err.response.status);\r\n      toast.error(errorMessage);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ loginUser, registerPatient, logout, user, setUser }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nconst getRoleFromRoles = (roles) => {\r\n  if (roles.includes(\"PATIENT\")) {\r\n    return \"PATIENT\";\r\n  } else if (roles.includes(\"EMPLOYEE\")) {\r\n    return \"EMPLOYEE\";\r\n  } else if (roles.includes(\"ADMIN\")) {\r\n    return \"ADMIN\";\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default AuthContext;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}