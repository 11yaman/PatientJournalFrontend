{"ast":null,"code":"var _s = $RefreshSig$();\n// useEncounters.js\nimport { useEffect, useState } from \"react\";\nimport useApi from \"./useApi\";\nimport { toast } from \"react-toastify\";\nimport useAuth from \"./useAuth\";\nconst useEncounters = employeeId => {\n  _s();\n  const {\n    get,\n    loading,\n    error\n  } = useApi();\n  const [encounters, setEncounters] = useState([]);\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    const fetchEncounters = async () => {\n      try {\n        if (user && user.token) {\n          const fetchedEncounters = await get(`http://localhost:8082/api/v1/employees/${employeeId}/future_encounters`, user.token);\n          if (fetchedEncounters) {\n            setEncounters(fetchedEncounters);\n          } else {\n            toast.error(\"Error fetching future encounters\");\n          }\n        }\n      } catch (error) {\n        toast.error(\"Error fetching future encounters\");\n      }\n    };\n    fetchEncounters();\n  }, [user, employeeId]);\n  return {\n    encounters,\n    loading,\n    error\n  };\n};\n_s(useEncounters, \"olhe2l4hJwdoZNkq6xMRj3Ys4nk=\", false, function () {\n  return [useApi, useAuth];\n});\nexport default useEncounters;","map":{"version":3,"names":["useEffect","useState","useApi","toast","useAuth","useEncounters","employeeId","_s","get","loading","error","encounters","setEncounters","user","fetchEncounters","token","fetchedEncounters"],"sources":["C:/Users/Yaman/GitHub/PatientJournalFrontend/src/hooks/useEncounters.js"],"sourcesContent":["// useEncounters.js\r\nimport { useEffect, useState } from \"react\";\r\nimport useApi from \"./useApi\";\r\nimport { toast } from \"react-toastify\";\r\nimport useAuth from \"./useAuth\";\r\n\r\nconst useEncounters = (employeeId) => {\r\n  const { get, loading, error } = useApi();\r\n  const [encounters, setEncounters] = useState([]);\r\n  const { user } = useAuth();\r\n\r\n  useEffect(() => {\r\n    const fetchEncounters = async () => {\r\n      try {\r\n        if (user && user.token) {\r\n          const fetchedEncounters = await get(\r\n            `http://localhost:8082/api/v1/employees/${employeeId}/future_encounters`,\r\n            user.token\r\n          );\r\n          if (fetchedEncounters) {\r\n            setEncounters(fetchedEncounters);\r\n          } else {\r\n            toast.error(\"Error fetching future encounters\");\r\n          }\r\n        }\r\n      } catch (error) {\r\n        toast.error(\"Error fetching future encounters\");\r\n      }\r\n    };\r\n\r\n    fetchEncounters();\r\n  }, [user, employeeId]);\r\n\r\n  return { encounters, loading, error };\r\n};\r\n\r\nexport default useEncounters;\r\n"],"mappings":";AAAA;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,OAAO,MAAM,WAAW;AAE/B,MAAMC,aAAa,GAAIC,UAAU,IAAK;EAAAC,EAAA;EACpC,MAAM;IAAEC,GAAG;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGR,MAAM,CAAC,CAAC;EACxC,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM;IAAEY;EAAK,CAAC,GAAGT,OAAO,CAAC,CAAC;EAE1BJ,SAAS,CAAC,MAAM;IACd,MAAMc,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,IAAID,IAAI,IAAIA,IAAI,CAACE,KAAK,EAAE;UACtB,MAAMC,iBAAiB,GAAG,MAAMR,GAAG,CAChC,0CAAyCF,UAAW,oBAAmB,EACxEO,IAAI,CAACE,KACP,CAAC;UACD,IAAIC,iBAAiB,EAAE;YACrBJ,aAAa,CAACI,iBAAiB,CAAC;UAClC,CAAC,MAAM;YACLb,KAAK,CAACO,KAAK,CAAC,kCAAkC,CAAC;UACjD;QACF;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdP,KAAK,CAACO,KAAK,CAAC,kCAAkC,CAAC;MACjD;IACF,CAAC;IAEDI,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,CAACD,IAAI,EAAEP,UAAU,CAAC,CAAC;EAEtB,OAAO;IAAEK,UAAU;IAAEF,OAAO;IAAEC;EAAM,CAAC;AACvC,CAAC;AAACH,EAAA,CA5BIF,aAAa;EAAA,QACeH,MAAM,EAErBE,OAAO;AAAA;AA2B1B,eAAeC,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}